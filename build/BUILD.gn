# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")
import("//foundation/arkui/ace_engine/build/ace_lib.gni")

# generate libace_engine and libace_debug targets
foreach(item, ace_platforms) {
  platform = item.name
  engine_config = {
  }
  engine_config = item.config
  support_engines = []
  support_engines = engine_config.js_engines

  # generate libace_static lib
  libace_static("libace_static_" + item.name) {
    platform = item.name
    config = {
    }

    if (defined(item.config)) {
      config = item.config
    }
  }

  # generate separated libace_engine lib
  if (current_os == "ohos") {
    build_in_engine = defined(engine_config.use_build_in_js_engine) &&
                      engine_config.use_build_in_js_engine
    foreach(engine, support_engines) {
      if (!build_in_engine) {
        # generate libace_engine
        ace_bridge_engine("libace_engine_${engine.engine_name}_${platform}") {
          platform = item.name
          engine_name = engine.engine_name
          build_type = "engine"
          use_js_debug = false
        }

        # generate libace_engine_debug
        if (defined(engine.have_debug) && engine.have_debug) {
          ace_bridge_engine(
              "libace_engine_${engine.engine_name}_debug_${platform}") {
            platform = item.name
            engine_name = engine.engine_name
            build_type = "engine"
            use_js_debug = true
          }
        }

        # generate libace_engine_declarative
        ace_bridge_engine(
            "libace_engine_declarative_${engine.engine_name}_${platform}") {
          platform = item.name
          engine_name = engine.engine_name
          build_type = "engine_declarative"
        }
      }

      # generate libace_engine_pa
      if (defined(engine_config.js_pa_support) && engine_config.js_pa_support &&
          platform != "ohos_ng") {
        ace_bridge_engine("libace_engine_pa_${engine.engine_name}") {
          platform = item.name
          engine_name = engine.engine_name
          build_type = "engine_pa"
          pa_engine_path = engine_config.pa_engine_path
        }
      }
    }
  }
}

foreach(item, ace_platforms) {
  platform = item.name
  if (platform == "ohos") {
    ohos_source_set("ace_ohos_unittest_base") {
      subsystem_name = ace_engine_subsystem
      part_name = ace_engine_part
      testonly = true
      sources = [
        "$ace_root/frameworks/core/components/test/mock/mock_resource_adapter.cpp",
        "$ace_root/test/mock/adapter/mock_ace_container.cpp",
        "$ace_root/test/mock/base/mock_download_manager.cpp",
        "$ace_root/test/mock/base/mock_drag_window.cpp",
        "$ace_root/test/mock/base/mock_subwindow.cpp",
        "$ace_root/test/mock/core/common/mock_ace_application_info.cpp",
        "$ace_root/test/mock/interfaces/mock_ace_forward_compatibility.cpp",
      ]

      if (is_ohos_standard_system) {
        sources -= [
          "$ace_root/frameworks/core/components/test/mock/mock_resource_adapter.cpp",
          "$ace_root/test/mock/base/mock_download_manager.cpp",
        ]
      }

      configs = [
        "$ace_root:ace_test_config",
        "$ace_root:ace_coverage_config",
      ]

      deps = [
        "$ace_root/adapter/ohos/osal:ace_osal_ohos_ohos",
        "$ace_root/frameworks/base:ace_base_ohos",
        "$ace_root/frameworks/base/resource:ace_resource",
        "$ace_root/frameworks/bridge:framework_bridge_ohos",
        "$ace_root/frameworks/core:ace_core_ohos",
        "$ace_root/frameworks/core/components/theme:build_theme_code",
        "//third_party/googletest:gmock_main",
        "//third_party/googletest:gtest_main",
      ]

      external_deps = [
        "ability_runtime:abilitykit_native",
        "c_utils:utils",
        "napi:ace_napi",
      ]
    }
  }
}

# Config for reduceing eh_frame section on aosp platform to save rom size.
config("reduce_eh_frame_config") {
  if (!use_mingw_win && !use_mac && !use_linux) {
    cflags = [
      "-fno-unwind-tables",
      "-fomit-frame-pointer",
    ]
    cflags_cc = cflags
  }
}

ohos_shared_library("libace_compatible") {
  if (is_ohos) {
    sanitize = {
      integer_overflow = true
      boundary_sanitize = true
      debug = ace_sanitize_debug
    }
    deps = [ "$ace_root/build:libace_static_ohos" ]
    version_script = "libace.map"
    innerapi_tags = [ "platformsdk" ]
    configs = [ "$ace_root:ace_coverage_config" ]
  } else if (use_mingw_win) {
    deps = [ "$ace_root/build:libace_static_windows" ]
  } else if (use_mac) {
    deps = [ "$ace_root/build:libace_static_mac" ]
  } else if (use_linux) {
    deps = [ "$ace_root/build:libace_static_linux" ]
  }

  part_name = ace_engine_part
  subsystem_name = ace_engine_subsystem
}

if (!is_asan) {
  ohos_shared_library("libace") {
    if (is_ohos) {
      sanitize = {
        integer_overflow = true
        boundary_sanitize = true
        debug = ace_sanitize_debug
      }
      deps = [ "$ace_root/build:libace_static_ohos_ng" ]
      version_script = "libace.map"
      innerapi_tags = [ "platformsdk" ]
      configs = [ "$ace_root:ace_coverage_config" ]
    } else if (use_mingw_win) {
      deps = [ "$ace_root/build:libace_static_windows" ]
    } else if (use_mac) {
      deps = [ "$ace_root/build:libace_static_mac" ]
    } else if (use_linux) {
      deps = [ "$ace_root/build:libace_static_linux" ]
    }

    part_name = ace_engine_part
    subsystem_name = ace_engine_subsystem
  }
} else {
  group("libace") {
    # fake target for asan
  }
}
